#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Easy;
use URI::Escape;

get_options '	h-help

		S-services
		L-languages=
		E-expirations=
		o-options=
		
		s-service=
		l-language=
		e-expiration=
		p-private
		r-run
		n-name=
		t-title=
		d-desc=
		
		c-curl', 'usage: elmer [OPTIONS] [FILES]';

if ($O{'help'}) {
	print	"elmer -- the ultimate paste\n",
		"\t", '-h', "\t", 'print this help menu', "\n\n",
		
		"\t", '-S', "\t", 'print services', "\n",
		"\t", '-L', "\t", 'print languages for service', "\n",
		"\t", '-E', "\t", 'print expirations for service', "\n",
		"\t", '-o', "\t", 'print options for service', "\n\n",
		
		"\t", '-s', "\t", 'service (default: codepad)', "\n",
		"\t", '-l', "\t", 'language (default: plain)', "\n",
		"\t", '-e', "\t", 'expiration (default: 1 day)', "\n",
		"\t", '-p', "\t", 'private', "\n",
		"\t", '-r', "\t", 'run', "\n",
		"\t", '-n', "\t", 'name', "\n",
		"\t", '-t', "\t", 'title', "\n",
		"\t", '-d', "\t", 'description', "\n\n",
		
		"\t", '-c', "\t", 'use curl or lwp instead of wget', "\n";
	
	exit(0);
}

if ($O{'services'}) {
	print	"Available services:\n",
		"\t", 'codepad', "\t\t", 'http://codepad.org', "\t\t", 'Text', "\n",
		"\t", 'pbcom', "\t\t", 'http://pastebin.com', "\t\t", 'Text', "\n",
		"\t", 'pborg', "\t\t", 'http://pastebin.org', "\t\t", 'Text', "\n",
		"\t", 'lodgeit', "\t\t", 'http://paste.pocoo.org', "\t\t", 'Text', "\n";
# 		"\t", 'dpcom', "\t\t", 'http://dpaste.com', "\t\t", 'Text', "\n",
# 		"\t", 'dporg', "\t\t", 'http://dpaste.org', "\t\t", 'Text', "\n",
# 		"\t", 'copy', "\t\t", 'http://copypastecode.com', "\t", 'Text', "\n",
# 		"\t", 'util', "\t\t", 'http://utilitybase.com/paste', "\t", 'Text', "\n",
# 		"\t", 'paste2', "\t\t", 'http://paste2.org/', "\t\t", 'Text', "\n",
# 		"\t", 'pastie', "\t\t", 'http://pastie.org', "\t\t", 'Text', "\n",
# 		"\t", 'sprunge', "\t\t", 'http://sprunge.us', "\t\t", 'Text', "\n",
# 		"\t", 'omp', "\t\t", 'http://omploader.org', "\t\t", 'Any', "\n",
# 		"\t", 'sudo', "\t\t", 'http://sudokode.net', "\t\t", 'Images', "\n";
		
	exit(0);
}

if ($O{'options'}) {
	my %options = (
		codepad => 'languages private run',
		pbcom => 'languages expirations private title',
		pborg => 'languages expirations name',
		lodgeit => 'languages private'
	);
	
	print "Available options for ", $O{'options'}, ":\n\t";
	my @opts = split(' ', $options{$O{'options'}});
	print join("\n\t", @opts), "\n";
	
	exit(0);
}

our %errors = (
	service => 1,		# Service unavailable
	language => 2,		# Language unavailable for service
	expire => 3,		# Expire unavailable for service
	noinput => 4,		# No input to paste (file or stdin)
	file => 5,		# File cannot be read
	program => 6,		# Cannot find wget or curl
	paste => 7		# Paste failed
);

sub error($$) {
	my $msg = shift;
	my $code = shift;
	
	print "$msg\n";
	exit($code);
}

sub print_langs($$) {
	my $service = shift;
	my %langs = %{$_[0]};
	
	print "Available languages for $service:\n";
	
	foreach (sort(keys(%langs))) {
		print "\t", $_, "\n";
	}
	
	exit(0);
}

sub print_exp($$) {
	my $service = shift;
	my %exp = %{$_[0]};
	
	print "Available expirations for $service:\n";
	
	foreach (sort(keys(%exp))) {
		print "\t", $_, "\n";
	}
	
	print "min = minute, h = hour, d = day, w = week, m = month, y = year\n";
	
	exit(0);
}

sub paste($$) {
	my $host = shift;
	my $data = shift;
	my $curl = $O{'curl'};
	
	if (not $curl && `which wget` eq "/usr/bin/wget\n") {
		return `wget -qO - $host --post-data="$data"`;
	} elsif (`which curl` eq "/usr/bin/curl\n") {
		return `curl -is -H "Expect:" $host -d "$data"`;
	} else {
		error('Could not find wget or curl.', $errors{'program'});
	}
}

sub codepad($) {
	my $text = shift;
	my $lang = $O{'language'} || 'plain';
	my $run = $O{'run'};	# True or False
	my $private = $O{'private'};	#True or False
	
	my %langs = ('plain', 'Plain Text', 'c', 'C', 'c++', 'C++', 'd', 'D', 'haskell', 'Haskell', 'lua', 'Lua', 'ocaml', 'OCaml', 'php', 'PHP', 'perl', 'Perl', 'python', 'Python', 'ruby', 'Ruby', 'scheme', 'Scheme', 'tcl', 'Tcl');
	
	if ($text eq 'langs') { print_langs('codepad', \%langs); }
	
	$lang = lc $lang;
	if (not $langs{$lang}) { error("Language $lang not available for codepad.\nTry `elmer -L codepad`.", $errors{'language'}); }
	else { $lang = $langs{$lang}; }
	
	if ($run) { $run = 'True'; }
	else { $run = 'False'; }
	
	if ($private) { $private = 'True'; }
	else { $private = 'False'; }
	
	$text = uri_escape($text);
	
	my $data = "run=$run&lang=$lang&private=$private&code=$text&submit=Submit";
	my $response = paste('http://codepad.org/', $data);
	
	if ($response =~ m/(http:\/\/codepad.org\/\w+)/) {
		print "Pasted: $1\n";
		exit(0);
	}
	
	error('Paste failed!', $errors{'paste'});
}

sub pbcom($) {
	my $text = shift;
	my $lang = $O{'language'} || 'plain';
	my $expiration = $O{'expiration'} || '1d';
	my $private = $O{'private'};	# 0 or 1
	my $title = $O{'title'};
	
	my %langs = ('plain', 1, 'action', 2, 'action3', 74, 'ada', 3, 'apache', 4, 'apple', 5, 'apt', 75, 'asm', 6, 'asp', 7, 'bash', 8, 'brainfuck', 79, 'c', 9, 'c#', 14, 'c++', 13, 'cmake', 83, 'cobol', 84, 'coldfusion', 15, 'css', 16, 'd', 17, 'delphi', 18, 'diff', 19, 'dos', 20, 'eiffel', 21, 'email', 88, 'erlang', 57, 'fortran', 22, 'freebasic', 23, 'gettext', 90, 'haskell', 60, 'html', 25, 'ini', 26, 'intercal', 95, 'java', 27, 'java5', 97, 'javascript', 28, 'latex', 62, 'lisp', 29, 'lua', 30, 'make', 106, 'matlab', 31, 'mirc', 66, 'modula3', 107, 'mxml', 108, 'mysql', 33, 'ojb-c', 35, 'ocaml', 36, 'pascal', 39, 'perl', 40, 'php', 41, 'powersh', 117, 'prolog', 119, 'python', 42, 'qbasic', 43, 'rails', 67, 'ruby', 45, 'scala', 125, 'scheme', 46, 'scilab', 126, 'smalltalk', 69, 'sql', 48, 'tcl', 49, 'unreal', 71, 'vb.net', 51, 'vim', 134, 'vbasic', 50, 'whois', 137, 'xml', 53, 'xorg', 139);
	
	my %expirations = ('never', 'N', '10min', '10M', '1h', '1H', '1d', '1D', '1m', '1M');
	
	if ($text eq 'langs') { print_langs('pbcom', \%langs); }
	if ($text eq 'exp') { print_exp('pbcom', \%expirations); }
	
	$lang = lc $lang;
	if (not $langs{$lang}) { error("Language $lang not available for pbcom.\nTry `elmer -L pbcom`.", $errors{'language'}); }
	else { $lang = $langs{$lang}; }
	
	$expiration = lc $expiration;
	if (not $expirations{$expiration}) { error("Expiration $expiration not available for pbcom.\nTry `elmer -E pbcom`.", $errors{'expire'}); }
	else { $expiration = $expirations{$expiration}; }
	
	$text = uri_escape($text);
	
	my $data = "paste_format=$lang&paste_expire_date=$expiration&paste_private=$private&paste_name=$title&paste_code=$text&submit=submit";
	my $response = paste('http://pastebin.com/post.php', $data);
	
	if ($response =~ m/http:\/\/pastebin.com\/(\w+)/ || $response =~ m/location: \/(\w+)/) {
		print "Pasted: http://pastebin.com/$1\n";
		exit(0);
	}
	
	error('Paste failed!', $errors{'paste'});
}

sub pborg($) {
	my $text = shift;
	my $lang = $O{'language'} || 'plain';
	my $expiration = $O{'expiration'} || '1d';
	my $name = $O{'name'};
	
	my %langs = ('plain', 'text', 'action', 'actionscript', 'ada', 'ada', 'apache', 'apache', 'apple', 'applescript', 'asm', 'asm', 'asp', 'asp', 'bash', 'bash', 'c', 'c', 'c++', 'cpp', 'c#', 'csharp', 'coldfusion', 'cfm', 'css', 'css', 'd', 'd', 'delphi', 'delphi', 'diff', 'diff', 'dos', 'dos', 'eiffel', 'eiffel', 'fortran', 'fortran', 'freebasic', 'freebasic', 'html', 'html4strict', 'ini', 'ini', 'java', 'java', 'javascript', 'javascript', 'lisp', 'lisp', 'lua', 'lua', 'matlab', 'matlab', 'mpasm', 'mpasm', 'mysql', 'mysql', 'nullsoft', 'nsis', 'obj-c', 'objc', 'ocaml', 'ocaml', 'openoffice', 'oobas', 'oracle8', 'oracle8', 'pascal', 'pascal', 'perl', 'perl', 'php', 'php', 'python', 'python', 'qbasic', 'qbasic', 'robots', 'robots', 'ruby', 'ruby', 'scheme', 'scheme', 'smarty', 'smarty', 'sql', 'sql', 'tcl', 'tcl', 'vbasic', 'vb', 'vb.net', 'vbnet', 'xml', 'xml');
	
	my %expirations = ('never', 'f', '1d', 'd', '1m', 'm');
	
	if ($text eq 'langs') { print_langs('pborg', \%langs); }
	if ($text eq 'exp') { print_exp('pborg', \%expirations); }
	
	$lang = lc $lang;
	if (not $langs{$lang}) { error("Language $lang not available for pborg.\nTry `elmer -L pborg`.", $errors{'language'}); }
	else { $lang = $langs{$lang}; }
	
	$expiration = lc $expiration;
	if (not $expirations{$expiration}) { error("Expiration $expiration not available for pborg.\nTry `elmer -E pborg`.", $errors{'expire'}); }
	else { $expiration = $expirations{$expiration}; }
	
	$text = uri_escape($text);
	
	my $data = "format=$lang&code2=$text&poster=$name&expiry=$expiration&paste=Send";
	my $response = paste('http://pastebin.org/pastebin.php', $data);
	
	if ($response =~ m/(http:\/\/pastebin.org\/\d+)/) {
		print "Pasted: $1\n";
		exit(0);
	}
	
	error('Paste failed!', $errors{'paste'});
}

sub lodgeit($) {
	my $text = shift;
	my $lang = $O{'language'} || 'plain';
	my $private = $O{'private'};	# on or NULL
	
	my %langs = ('plain', 'text', 'apache', 'apache', 'bash', 'bash', 'batch', 'bat', 'boo', 'boo', 'brainfuck', 'brainfuck', 'c', 'c', 'c#', 'csharp', 'c++', 'cpp', 'clojure', 'clojure', 'creole', 'creole', 'css', 'css', 'csv', 'csv', 'd', 'd', 'control', 'control', 'django', 'html+django', 'dylan', 'dylan', 'erlang', 'erlang', 'rhtml', 'rhtml', 'gas', 'gas', 'gcc', 'gcc-messages', 'genshi', 'genshi', 'gettext', 'gettext', 'opengl', 'glsl', 'go', 'go', 'haskell', 'haskell', 'html', 'html', 'ini', 'ini', 'irb', 'irb', 'io', 'io', 'irc', 'irc', 'java', 'java', 'javac', 'javac-messages', 'javascript', 'js', 'jsp', 'jsp', 'lighty', 'lighttpd', 'lithaskell', 'literate-haskell', 'llvm', 'llvm', 'lua', 'lua', 'mako', 'html+mako', 'matlab', 'matlab', 'matlab-sess', 'matlabsession', 'minid', 'minid', 'multi', 'multi', 'myghty', 'html+myghty', 'mysql', 'mysql', 'nasm', 'nasm', 'nginx', 'nginx', 'delphi', 'objectpascal', 'ocaml', 'ocaml', 'perl', 'perl', 'php', 'html+php', 'povray', 'povray', 'python', 'python', 'pycon', 'pycon', 'pytb', 'pytb', 'rst', 'rst', 'ruby', 'ruby', 'scala', 'scala', 'scheme', 'scheme', 'smalltalk', 'smalltalk', 'smarty', 'smarty', 'sources', 'sourceslist', 'sql', 'sql', 'squidconf', 'squidconf', 'tex', 'tex', 'diff', 'diff', 'vim', 'vim', 'xml', 'xml', 'xslt', 'xslt', 'yaml', 'yaml');
	
	if ($text eq 'langs') { print_langs('lodgeit', \%langs); }
	
	$lang = lc $lang;
	if (not $langs{$lang}) { error("Language $lang not available for lodgeit.\nTry `elmer -L lodgeit`.", $errors{'language'}); }
	else { $lang = $langs{$lang}; }
	
	$text = uri_escape($text);
	
	my $data = "code=$text&language=$lang&";
	if ($private) { $data .= 'private=on&'; }
	$data .= 'submit=Paste!';
	my $response = paste('http://paste.pocoo.org/', $data);
	
	if ($response =~ m/\/raw\/(\d+)/ ||$response =~ m/Location:.*\/(\d+)/) {
		print "Pasted: http://paste.pocoo.org/show/$1/\n";
		exit(0);
	}
	
	error('Paste failed!', $errors{'paste'});
}

if ($O{'languages'}) {
	use Switch;
	switch (lc $O{'languages'}) {
		case 'codepad'		{ codepad('langs'); }
		case 'pbcom'		{ pbcom('langs'); }
		case 'pborg'		{ pborg('langs'); }
		case 'lodgeit'		{ lodgeit('langs'); }
# 		case 'dpcom'		{ dpcom('langs'); }
# 		case 'dporg'		{ dporg('langs'); }
# 		case 'copy'		{ copy('langs'); }
# 		case 'util'		{ util('langs'); }
# 		case 'paste2'		{ paste2('langs'); }
# 		case 'pastie'		{ pastie('langs'); }
		case ''			{ codepad('langs'); }
		default		{ error('No languages for ' . $O{'languages'} . '.', $errors{'language'}); }
	}
	
	exit(0);
}

if ($O{'expirations'}) {
	use Switch;
	switch (lc $O{'expirations'}) {
		case 'pbcom'		{ pbcom('exp'); }
		case 'pborg'		{ pborg('exp'); }
# 		case 'dpcom'		{ dpcom('exp'); }
# 		case 'dporg'		{ dporg('exp'); }
# 		case 'copy'		{ copy('exp'); }
# 		case 'util'		{ util('exp'); }
# 		case 'paste2'		{ paste2('exp'); }
# 		case 'pastie'		{ pastie('exp'); }
		case ''			{ codepad('exp'); }
		default		{ error('No expirations for ' . $O{'expirations'} . '.', $errors{'expire'}); }
	}
	
	exit(0);
}

my $input = shift or error('No input found.', $errors{'noinput'});
if (-e $input) { $input = `cat $input` || error('File cannot be read.', $errors{'file'}); }

use Switch;
switch (lc $O{'service'}) {
	case 'codepad'		{ codepad($input); }
	case 'pbcom'		{ pbcom($input); }
	case 'pborg'		{ pborg($input); }
	case 'lodgeit'		{ lodgeit($input); }
	case ''			{ codepad($input); }
	default		{ error('Service ' . $O{'service'} . ' not available.', $errors{'service'}); }
}

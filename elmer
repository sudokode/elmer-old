#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Easy;
use URI::Escape;

#             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
#                     Version 2, December 2004 
# 
#  Copyright (C) 2004 Sam Hocevar <sam@hocevar.net> 
# 
#  Everyone is permitted to copy and distribute verbatim or modified 
#  copies of this license document, and changing it is allowed as long 
#  as the name is changed. 
# 
#             DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE 
#    TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION 
# 
#   0. You just DO WHAT THE FUCK YOU WANT TO

get_options '	h-help

		S-services
		L-languages=
		E-expirations=
		o-options=

		s-service=
		l-language=
		e-expiration=
		p-private
		r-run
		t-title=
		d-desc=
		c-curl', 'usage: elmer [OPTIONS] [FILES]';

if ($O{'help'}) {
	print	"elmer -- the ultimate paste\n",
		"\t", '-h', "\t", 'print this help menu', "\n\n",
		
		"\t", '-S', "\t", 'print services', "\n",
		"\t", '-L', "\t", 'print languages for service', "\n",
		"\t", '-E', "\t", 'print expirations for service', "\n",
		"\t", '-o', "\t", 'print options for service', "\n\n",
		
		"\t", '-s', "\t", 'service (default: codepad)', "\n",
		"\t", '-l', "\t", 'language (default: plain)', "\n",
		"\t", '-e', "\t", 'expiration (default: 1 day)', "\n",
		"\t", '-p', "\t", 'private', "\n",
		"\t", '-r', "\t", 'run', "\n",
		"\t", '-t', "\t", 'title', "\n",
		"\t", '-d', "\t", 'description', "\n",
		"\t", '-c', "\t", 'use curl instead of wget', "\n";
	
	exit(0);
}

if ($O{'services'}) {
	print	"Available services:\n",
		"\t", 'codepad', "\t\t", 'http://codepad.org', "\t\t", 'Text', "\n",
 		"\t", 'pbcom', "\t\t", 'http://pastebin.com', "\t\t", 'Text', "\n";
# 		"\t", 'pborg', "\t\t", 'http://pastebin.org', "\t\t", 'Text', "\n",
# 		"\t", 'pbws', "\t\t", 'http://pastebin.ws', "\t\t", 'Text', "\n",
# 		"\t", 'lodgeit', "\t\t", 'http://paste.pocoo.org', "\t\t", 'Text', "\n",
# 		"\t", 'dpcom', "\t\t", 'http://dpaste.com', "\t\t", 'Text', "\n",
# 		"\t", 'dporg', "\t\t", 'http://dpaste.org', "\t\t", 'Text', "\n",
# 		"\t", 'copy', "\t\t", 'http://copypastecode.com', "\t", 'Text', "\n",
# 		"\t", 'util', "\t\t", 'http://utilitybase.com/paste', "\t", 'Text', "\n",
# 		"\t", 'paste2', "\t\t", 'http://paste2.org/', "\t\t", 'Text', "\n",
# 		"\t", 'pastie', "\t\t", 'http://pastie.org', "\t\t", 'Text', "\n",
# 		"\t", 'sprunge', "\t\t", 'http://sprunge.us', "\t\t", 'Text', "\n",
# 		"\t", 'omp', "\t\t", 'http://omploader.org', "\t\t", 'Any', "\n",
# 		"\t", 'sudo', "\t\t", 'http://sudokode.net', "\t\t", 'Images', "\n";
		
	exit(0);
}

if ($O{'options'}) {
	my %options = (
		codepad => "languages private run",
# 		pbcom => "languages expirations private title"
	);
	
	print "Available options for ", $O{'options'}, ":\n\t";
	my @opts = split(' ', $options{$O{'options'}});
	print join("\n\t", @opts), "\n";
	
	exit(0);
}

our %errors = (
	service => 1,		# Service unavailable
	language => 2,		# Language unavailable for service
	expire => 3,		# Expire unavailable for service
	noinput => 4,		# No input to paste (file or stdin)
	file => 5,		# File cannot be read
	program => 6,		# Cannot find wget or curl
	paste => 7		# Paste failed
);

sub error($$) {
	my $msg = shift;
	my $code = shift;
	
	print "$msg\n";
	exit($code);
}

sub print_langs($$) {
	my $service = shift;
	my %langs = %{$_[0]};
	
	print "Available languages for $service:\n";
	
	foreach (sort(keys(%langs))) {
		print "\t", $_, "\n";
	}
	
	exit(0);
}

sub print_exp($$) {
	my $service = shift;
	my %exp = %{$_[0]};
	
	print "Available expirations for $service:\n";
	
	foreach (sort(keys(%exp))) {
		print "\t", $_, "\n";
	}
	
	exit(0);
}

sub post($$) {
	my $host = shift;
	my $data = shift;
	my $curl = $O{'curl'};
	
	if (not $curl && `which wget` eq "/usr/bin/wget\n") {
		return `wget -O - --quiet $host --post-data="$data"`;
	} elsif ($curl && `which curl` eq "/usr/bin/curl\n") {
		return `curl --silent $host -d "$data"`;
	} else {
		error('Could not find wget or curl.', $errors{'program'});
	}
}	

sub codepad($) {
	my $text = shift;
	my $lang = $O{'language'} || 'plain';
	my $run = $O{'run'};	# True or False
	my $private = $O{'private'};	#True or False
	
	my %langs = ('c', 'C', 'c++', 'C++', 'd', 'D', 'haskell', 'Haskell', 'lua', 'Lua', 'ocaml', 'OCaml', 'php', 'PHP', 'perl', 'Perl', 'plain', 'Plain Text', 'python', 'Python', 'ruby', 'Ruby', 'scheme', 'Scheme', 'tcl', 'Tcl');
	
	if ($text eq 'langs') { print_langs('codepad', \%langs); }
	
	$lang = lc $lang;
	if (not $langs{$lang}) { error("Language $lang not available for codepad.\nTry `elmer -L codepad`.", $errors{'language'}); }
	else { $lang = $langs{$lang}; }
	
	if ($run) { $run = 'True'; }
	else { $run = 'False'; }
	
	if ($private) { $private = 'True'; }
	else { $private = 'False'; }
	
	$text = uri_escape($text);
	
	my $data = "client=elmer&run=$run&lang=$lang&private=$private&code=$text&submit=Submit";
	my $response = post('http://codepad.org', $data);
	
	my @lines = split('\n', $response);
	foreach (@lines) {
		if ($_ =~ m/(http:\/\/codepad.org\/\w+)/) {
			print "Pasted: $1\n";
			exit(0);
		}
	}
	
	error('Paste failed!', $errors{'paste'});
}

sub pbcom($) {
	my $text = shift;
	my $lang = $O{'language'} || 'plain';
	my $expiration = $O{'expiration'} || '1d';
	my $private = $O{'private'};	# 0 or 1
	my $title = $O{'title'};
	
	my %langs = ('ada', 3, 'apache', 4, 'apple', 5, 'apt', 75, 'asm', 6, 'asp', 7, 'bash', 8, 'brainfuck', 79, 'c', 9, 'c#', 14, 'c++', 13, 'cmake', 83, 'cobol', 84, 'coldfusion', 15, 'css', 16, 'd', 17, 'delphi', 18, 'diff', 19, 'dos', 20, 'eiffel', 21, 'email', 88, 'erlang', 57, 'fortran', 22, 'freebasic', 23, 'gettext', 90, 'haskell', 60, 'html', 25, 'ini', 26, 'intercal', 95, 'java', 27, 'java5', 97, 'javascript', 28, 'latex', 62, 'lisp', 29, 'lua', 30, 'make', 106, 'matlab', 31, 'mirc', 66, 'modula3', 107, 'mxml', 108, 'mysql', 33, 'plain', 1, 'ojbc', 35, 'ocaml', 36, 'pascal', 39, 'perl', 40, 'php', 41, 'powersh', 117, 'prolog', 119, 'python', 42, 'qbasic', 43, 'rails', 67, 'ruby', 45, 'scala', 125, 'scheme', 46, 'scilab', 126, 'smalltalk', 69, 'sql', 48, 'tcl', 49, 'unreal', 71, 'vbnet', 51, 'vim', 134, 'vbasic', 50, 'whois', 137, 'xml', 53, 'xorg', 139);
	
	my %expirations = ('never', 'N', '10m', '10M', '1h', '1H', '1d', '1D', '1m', '1M');
	
	if ($text eq 'langs') { print_langs('pbcom', \%langs); }
	if ($text eq 'exp') { print_exp('pbcom', \%expirations); }
	
	$lang = lc $lang;
	if (not $langs{$lang}) { error("Language $lang not available for pbcom.\nTry `elmer -L pbcom`.", $errors{'language'}); }
	else { $lang = $langs{$lang}; }
	
	$expiration = lc $expiration;
	if (not $expirations{$expiration}) { error("Expiration $expiration not available for pbcom.\nTry `elmer -E pbcom`.", $errors{'expire'}); }
	else { $expiration = $expirations{$expiration}; }
	
	$text = uri_escape($text);
	
	my $data = "client=elmer&paste_format=$lang&paste_expire_date=$expiration&paste_private=$private&paste_name=$title&paste_code=$text&submit=submit";
	my $response = post('http://pastebin.com/post.php', $data);
	
	my @lines = split('\n', $response);
	foreach (@lines) {
		if ($_ =~ m/(http:\/\/pastebin.com\/\w+)/) {
			print "Pasted: $1\n";
			exit(0);
		}
	}
	
	error('Paste failed!', $errors{'paste'});
}

if ($O{'languages'}) {
	use Switch;
	switch (lc $O{'languages'}) {
		case 'codepad'		{ codepad('langs'); }
		case 'pbcom'		{ pbcom('langs'); }
# 		case 'pborg'		{ pborg('langs'); }
# 		case 'pbws'		{ pbws('langs'); }
# 		case 'lodgeit'		{ lodgeit('langs'); }
# 		case 'dpcom'		{ dpcom('langs'); }
# 		case 'dporg'		{ dporg('langs'); }
# 		case 'copy'		{ copy('langs'); }
# 		case 'util'		{ util('langs'); }
# 		case 'paste2'		{ paste2('langs'); }
# 		case 'pastie'		{ pastie('langs'); }
		default		{ error("No languages found for " . $O{'languages'} . ".", $errors{'language'}); }
	}
	
	exit(0);
}

if ($O{'expirations'}) {
	use Switch;
	switch (lc $O{'expirations'}) {
		case 'pbcom'		{ pbcom('exp'); }
# 		case 'pborg'		{ pborg('exp'); }
# 		case 'pbws'		{ pbws('exp'); }
# 		case 'lodgeit'		{ lodgeit('exp'); }
# 		case 'dpcom'		{ dpcom('exp'); }
# 		case 'dporg'		{ dporg('exp'); }
# 		case 'copy'		{ copy('exp'); }
# 		case 'util'		{ util('exp'); }
# 		case 'paste2'		{ paste2('exp'); }
# 		case 'pastie'		{ pastie('exp'); }
		default		{ error("No expirations found for " . $O{'expirations'} . ".", $errors{'expire'}); }
	}
	
	exit(0);
}

my $input = shift or error('No input found.', $errors{'noinput'});
if (-e $input) { $input = `cat $input` || error('File cannot be read.', $errors{'file'}); }

use Switch;
switch (lc $O{'service'}) {
	case "codepad"		{ codepad($input); }
	case "pbcom"		{ pbcom($input); }
	case ""			{ codepad($input); }
	default		{ error("Service " . $O{'service'} . " not available.", $errors{'service'}); }
}
